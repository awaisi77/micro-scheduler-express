#!/usr/bin/env node

const app = require('../main');
const http = require('http');
const schedule = require('node-schedule');
const Scheduler = require('../helper/scheduler').Scheduler;
const config_data = require('../config/config.json');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.setTimeout(900000);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;

  console.log("Listening on " + bind);

  console.log("Starting main scheduler: ", config_data.schedulerTime);

  let scheduler = new Scheduler();
  schedule.scheduleJob(config_data.schedulerTime, function () {
    scheduler.ExecuteScheduler();
  });

}